diff --git a/vendor/anbox/src/anbox/cmds/launch.cpp b/vendor/anbox/src/anbox/cmds/launch.cpp
old mode 100644
new mode 100755
index a8de408..35f156f
--- a/vendor/anbox/src/anbox/cmds/launch.cpp
+++ b/vendor/anbox/src/anbox/cmds/launch.cpp
@@ -159,6 +159,9 @@ anbox::cmds::Launch::Launch()
   flag(cli::make_flag(cli::Name{"stack"},
                       cli::Description{"Which window stack the activity should be started on. Possible: default, fullscreen, freeform"},
                       stack_));
+  flag(cli::make_flag(cli::Name{"run-multiple"},
+                      cli::Description{"Allows more than one session-manager to run simultaneously, e.g. --run-multiple=<uniq_container_id>"},
+                      container_id_));
   flag(cli::make_flag(cli::Name{"use-system-dbus"},
                       cli::Description{"Use system instead of session DBus"},
                       use_system_dbus_));
@@ -171,6 +174,8 @@ anbox::cmds::Launch::Launch()
       ERROR("$ anbox launch --package=org.anbox.appmgr --component=org.anbox.appmgr.AppViewActivity");
       return EXIT_FAILURE;
     }
+    if (!container_id_.empty())
+      SystemConfiguration::instance().set_container_id(container_id_, true);
 
     auto bus_type = anbox::dbus::Bus::Type::Session;
     if (use_system_dbus_)
diff --git a/vendor/anbox/src/anbox/cmds/launch.h b/vendor/anbox/src/anbox/cmds/launch.h
old mode 100644
new mode 100755
index 2aa3d0f..bcf3368
--- a/vendor/anbox/src/anbox/cmds/launch.h
+++ b/vendor/anbox/src/anbox/cmds/launch.h
@@ -39,6 +39,7 @@ class Launch : public cli::CommandWithFlagsAndAction {
 
   android::Intent intent_;
   wm::Stack::Id stack_ = wm::Stack::Id::Default;
+  std::string container_id_;
   bool use_system_dbus_ = false;
 };
 }  // namespace cmds
diff --git a/vendor/anbox/src/anbox/cmds/session_manager.cpp b/vendor/anbox/src/anbox/cmds/session_manager.cpp
old mode 100644
new mode 100755
index df19c3d..d67cd75
--- a/vendor/anbox/src/anbox/cmds/session_manager.cpp
+++ b/vendor/anbox/src/anbox/cmds/session_manager.cpp
@@ -106,6 +106,9 @@ anbox::cmds::SessionManager::SessionManager()
   flag(cli::make_flag(cli::Name{"experimental"},
                       cli::Description{"Allows users to use experimental features"},
                       experimental_));
+  flag(cli::make_flag(cli::Name{"run-multiple"},
+                      cli::Description{"Allows more than one session-manager to run simultaneously, e.g. --run-multiple=<uniq_container_id>"},
+                      container_id_));
   flag(cli::make_flag(cli::Name{"use-system-dbus"},
                       cli::Description{"Use system instead of session DBus"},
                       use_system_dbus_));
@@ -119,8 +122,11 @@ anbox::cmds::SessionManager::SessionManager()
   action([this](const cli::Command::Context &) {
     auto trap = core::posix::trap_signals_for_process(
         {core::posix::Signal::sig_term, core::posix::Signal::sig_int});
-    trap->signal_raised().connect([trap](const core::posix::Signal &signal) {
+    trap->signal_raised().connect([this, trap](const core::posix::Signal &signal) {
       INFO("Signal %i received. Good night.", static_cast<int>(signal));
+      qemu_pipe_connector_.reset();
+      platform_->unset_window_manager();
+      platform_->unset_renderer();
       trap->stop();
     });
 
@@ -129,10 +135,19 @@ anbox::cmds::SessionManager::SessionManager()
       return EXIT_FAILURE;
     }
 
-    if ((!fs::exists("/dev/binder") && !fs::exists(BINDERFS_PATH)) || !fs::exists("/dev/ashmem")) {
+    auto bindername = "/dev/binder";
+    if (!container_id_.empty()) {
+      auto id = container_id_;
+      id.erase(std::remove_if(id.begin(), id.end(), isalpha), id.end());
+      id = "/dev/binder" + id;
+      bindername = id.c_str();
+    }
+    if (!fs::exists(bindername) || !fs::exists("/dev/ashmem")) {
       ERROR("Failed to start as either binder or ashmem kernel drivers are not loaded");
       return EXIT_FAILURE;
     }
+   if (!container_id_.empty())
+      SystemConfiguration::instance().set_container_id(container_id_, false);
 
     utils::ensure_paths({
         SystemConfiguration::instance().socket_dir(),
@@ -166,20 +181,20 @@ anbox::cmds::SessionManager::SessionManager()
     platform_config.no_touch_emulation = no_touch_emulation_;
     platform_config.display_frame = display_frame;
 
-    auto platform = platform::create(utils::get_env_value("ANBOX_PLATFORM", "sdl"),
+    platform_ = platform::create(utils::get_env_value("ANBOX_PLATFORM", "sdl"),
                                      input_manager,
                                      platform_config);
-    if (!platform)
+    if (!platform_)
       return EXIT_FAILURE;
 
     auto app_db = std::make_shared<application::Database>();
 
     std::shared_ptr<wm::Manager> window_manager;
     bool using_single_window = false;
-    if (platform->supports_multi_window() && !single_window_)
-      window_manager = std::make_shared<wm::MultiWindowManager>(platform, android_api_stub, app_db);
+    if (platform_->supports_multi_window() && !single_window_)
+      window_manager = std::make_shared<wm::MultiWindowManager>(platform_, android_api_stub, app_db);
     else {
-      window_manager = std::make_shared<wm::SingleWindowManager>(platform, display_frame, app_db);
+      window_manager = std::make_shared<wm::SingleWindowManager>(platform_, display_frame, app_db);
       using_single_window = true;
     }
 
@@ -194,8 +209,8 @@ anbox::cmds::SessionManager::SessionManager()
     };
     auto gl_server = std::make_shared<graphics::GLRendererServer>(renderer_config, window_manager);
 
-    platform->set_window_manager(window_manager);
-    platform->set_renderer(gl_server->renderer());
+    platform_->set_window_manager(window_manager);
+    platform_->set_renderer(gl_server->renderer());
     window_manager->setup();
 
     auto app_manager = std::static_pointer_cast<application::Manager>(android_api_stub);
@@ -207,13 +222,13 @@ anbox::cmds::SessionManager::SessionManager()
             android_api_stub, wm::Stack::Id::Freeform);
     }
 
-    auto audio_server = std::make_shared<audio::Server>(rt, platform);
+    auto audio_server = std::make_shared<audio::Server>(rt, platform_);
 
     const auto socket_path = SystemConfiguration::instance().socket_dir();
 
     // The qemu pipe is used as a very fast communication channel between guest
     // and host for things like the GLES emulation/translation, the RIL or ADB.
-    auto qemu_pipe_connector =
+    qemu_pipe_connector_ =
         std::make_shared<network::PublishedSocketConnector>(
             utils::string_format("%s/qemu_pipe", socket_path), rt,
             std::make_shared<qemu::PipeConnectionCreator>(gl_server->renderer(), rt));
@@ -234,7 +249,7 @@ anbox::cmds::SessionManager::SessionManager()
               android_api_stub->set_rpc_channel(rpc_channel);
 
               auto server = std::make_shared<bridge::PlatformApiSkeleton>(
-                  pending_calls, platform, window_manager, app_db);
+                  pending_calls, platform_, window_manager, app_db);
               server->register_boot_finished_handler([&]() {
                 DEBUG("Android successfully booted");
                 android_api_stub->ready().set(true);
@@ -261,7 +276,7 @@ anbox::cmds::SessionManager::SessionManager()
 
     if (!standalone_) {
       container_configuration.bind_mounts = {
-        {qemu_pipe_connector->socket_file(), "/dev/qemu_pipe"},
+        {qemu_pipe_connector_->socket_file(), "/dev/qemu_pipe"},
         {bridge_connector->socket_file(), "/dev/anbox_bridge"},
         {audio_server->socket_file(), "/dev/anbox_audio"},
         {SystemConfiguration::instance().input_device_dir(), "/dev/input"},
diff --git a/vendor/anbox/src/anbox/cmds/session_manager.h b/vendor/anbox/src/anbox/cmds/session_manager.h
old mode 100644
new mode 100755
index 0e90ab9..eff1082
--- a/vendor/anbox/src/anbox/cmds/session_manager.h
+++ b/vendor/anbox/src/anbox/cmds/session_manager.h
@@ -31,9 +31,15 @@ namespace anbox {
 namespace bridge {
 class AndroidApiStub;
 } // namespace bridge
+namespace platform {
+class BasePlatform;
+}  // namespace platform
 namespace container {
 class Client;
 }  // namespace container
+namespace network {
+class PublishedSocketConnector;
+}  // namespace container
 namespace cmds {
 class SessionManager : public cli::CommandWithFlagsAndAction {
  public:
@@ -43,11 +49,14 @@ class SessionManager : public cli::CommandWithFlagsAndAction {
   void launch_appmgr_if_needed(const std::shared_ptr<bridge::AndroidApiStub> &android_api_stub);
 
   std::shared_ptr<container::Client> container_;
+  std::shared_ptr<platform::BasePlatform> platform_;
+  std::shared_ptr<network::PublishedSocketConnector> qemu_pipe_connector_;
   std::string desktop_file_hint_;
   bool single_window_ = false;
   graphics::Rect window_size_;
   bool standalone_ = false;
   bool experimental_ = false;
+  std::string container_id_;
   bool use_system_dbus_ = false;
   bool use_software_rendering_ = false;
   bool no_touch_emulation_ = false;
diff --git a/vendor/anbox/src/anbox/dbus/interface.h b/vendor/anbox/src/anbox/dbus/interface.h
old mode 100644
new mode 100755
index abce44f..3254dc4
--- a/vendor/anbox/src/anbox/dbus/interface.h
+++ b/vendor/anbox/src/anbox/dbus/interface.h
@@ -17,16 +17,29 @@
 
 #ifndef ANBOX_DBUS_INTERFACE_H_
 #define ANBOX_DBUS_INTERFACE_H_
+#include "anbox/system_configuration.h"
 
 namespace anbox {
 namespace dbus {
 namespace interface {
 struct Service {
-  static inline const char* name() { return "org.anbox"; }
   static inline const char* path() { return "/org/anbox"; }
+  static inline const char* name() {
+    static std::string id = SystemConfiguration::instance().container_name();
+    std::string str = "org.anbox";
+    if (!id.empty())
+      str = str.append(id);
+    return str.c_str();
+  }
 };
 struct ApplicationManager {
-  static inline const char* name() { return "org.anbox.ApplicationManager"; }
+  static inline const char* name() {
+    static std::string id = SystemConfiguration::instance().container_name();
+    std::string str = "org.anbox.ApplicationManager";
+    if (!id.empty())
+      str = str.append(id);
+    return str.c_str();
+  }
   struct Methods {
       struct Launch {
         static inline const char* name() { return "Launch"; }
diff --git a/vendor/anbox/src/anbox/network/base_socket_messenger.cpp b/vendor/anbox/src/anbox/network/base_socket_messenger.cpp
old mode 100644
new mode 100755
index 23efc78..77698a7
--- a/vendor/anbox/src/anbox/network/base_socket_messenger.cpp
+++ b/vendor/anbox/src/anbox/network/base_socket_messenger.cpp
@@ -76,8 +76,6 @@ Credentials BaseSocketMessenger<stream_protocol>::creds() const {
 template <typename stream_protocol>
 ssize_t BaseSocketMessenger<stream_protocol>::send_raw(char const* data,
                                                        size_t length) {
-  VariableLengthArray<serialization_buffer_size> whole_message{length};
-  std::copy(data, data + length, whole_message.data());
 
   std::unique_lock<std::mutex> lg(message_lock);
   return ::send(socket_fd, data, length, MSG_NOSIGNAL);
@@ -86,13 +84,11 @@ ssize_t BaseSocketMessenger<stream_protocol>::send_raw(char const* data,
 template <typename stream_protocol>
 void BaseSocketMessenger<stream_protocol>::send(char const* data,
                                                 size_t length) {
-  VariableLengthArray<serialization_buffer_size> whole_message{length};
-  std::copy(data, data + length, whole_message.data());
 
   for (;;) {
     try {
       std::unique_lock<std::mutex> lg(message_lock);
-      ba::write(*socket, ba::buffer(whole_message.data(), whole_message.size()),
+      ba::write(*socket, ba::buffer(data, length),
                 boost::asio::transfer_all());
     } catch (const boost::system::system_error& err) {
       if (err.code() == boost::asio::error::try_again) continue;
diff --git a/vendor/anbox/src/anbox/network/published_socket_connector.cpp b/vendor/anbox/src/anbox/network/published_socket_connector.cpp
old mode 100644
new mode 100755
index 50e8fc5..1d4ca3e
--- a/vendor/anbox/src/anbox/network/published_socket_connector.cpp
+++ b/vendor/anbox/src/anbox/network/published_socket_connector.cpp
@@ -18,7 +18,9 @@
 #include "anbox/network/published_socket_connector.h"
 #include "anbox/network/connection_context.h"
 #include "anbox/network/socket_helper.h"
+#include "anbox/system_configuration.h"
 #include "anbox/logger.h"
+#include "anbox/utils.h"
 
 namespace anbox {
 namespace network {
@@ -30,10 +32,14 @@ PublishedSocketConnector::PublishedSocketConnector(
       runtime_(rt),
       connection_creator_(connection_creator),
       acceptor_(rt->service(), socket_file_) {
+  socket_dir_ = SystemConfiguration::instance().socket_dir();
   start_accept();
 }
 
-PublishedSocketConnector::~PublishedSocketConnector() noexcept {}
+PublishedSocketConnector::~PublishedSocketConnector() noexcept {
+     std::remove(socket_file_.c_str());
+     utils::remove_paths({socket_dir_});
+}
 
 void PublishedSocketConnector::start_accept() {
   auto socket = std::make_shared<boost::asio::local::stream_protocol::socket>(runtime_->service());
diff --git a/vendor/anbox/src/anbox/network/published_socket_connector.h b/vendor/anbox/src/anbox/network/published_socket_connector.h
old mode 100644
new mode 100755
index 1791f53..0a59cda
--- a/vendor/anbox/src/anbox/network/published_socket_connector.h
+++ b/vendor/anbox/src/anbox/network/published_socket_connector.h
@@ -45,6 +45,7 @@ class PublishedSocketConnector : public DoNotCopyOrMove, public Connector {
       boost::system::error_code const& err);
 
   const std::string socket_file_;
+  std::string socket_dir_;
   std::shared_ptr<Runtime> runtime_;
   std::shared_ptr<ConnectionCreator<boost::asio::local::stream_protocol>>
       connection_creator_;
diff --git a/vendor/anbox/src/anbox/network/socket_connection.cpp b/vendor/anbox/src/anbox/network/socket_connection.cpp
old mode 100644
new mode 100755
index 02c079d..71df519
--- a/vendor/anbox/src/anbox/network/socket_connection.cpp
+++ b/vendor/anbox/src/anbox/network/socket_connection.cpp
@@ -46,14 +46,18 @@ SocketConnection::SocketConnection(
       connections_(connections),
       processor_(processor) {}
 
-SocketConnection::~SocketConnection() noexcept {}
+SocketConnection::~SocketConnection() noexcept {
+    id_ = -1;
+}
 
 void SocketConnection::send(char const* data, size_t length) {
+    if (id_ != -1)
   message_sender_->send(data, length);
 }
 
 void SocketConnection::read_next_message() {
   auto callback = std::bind(&SocketConnection::on_read_size, this, std::placeholders::_1, std::placeholders::_2);
+  if (id_ != -1)
   message_receiver_->async_receive_msg(callback, ba::buffer(buffer_));
 }
 
diff --git a/vendor/anbox/src/anbox/platform/base_platform.h b/vendor/anbox/src/anbox/platform/base_platform.h
old mode 100644
new mode 100755
index 042781f..a78cc07
--- a/vendor/anbox/src/anbox/platform/base_platform.h
+++ b/vendor/anbox/src/anbox/platform/base_platform.h
@@ -57,6 +57,8 @@ class BasePlatform {
   virtual void set_renderer(const std::shared_ptr<Renderer> &renderer) = 0;
   virtual void set_window_manager(const std::shared_ptr<wm::Manager> &window_manager) = 0;
 
+  virtual void unset_renderer() = 0;
+  virtual void unset_window_manager() = 0;
   virtual bool supports_multi_window() const = 0;
 };
 
diff --git a/vendor/anbox/src/anbox/platform/null/platform.cpp b/vendor/anbox/src/anbox/platform/null/platform.cpp
old mode 100644
new mode 100755
index c894806..4fbfc2b
--- a/vendor/anbox/src/anbox/platform/null/platform.cpp
+++ b/vendor/anbox/src/anbox/platform/null/platform.cpp
@@ -68,6 +68,12 @@ void NullPlatform::set_window_manager(const std::shared_ptr<wm::Manager> &window
   ERROR("Not implemented");
 }
 
+void NullPlatform::unset_renderer() {
+  ERROR("Not implemented");
+}
+void NullPlatform::unset_window_manager() {
+  ERROR("Not implemented");
+}
 bool NullPlatform::supports_multi_window() const {
   return false;
 }
diff --git a/vendor/anbox/src/anbox/platform/null/platform.h b/vendor/anbox/src/anbox/platform/null/platform.h
old mode 100644
new mode 100755
index 24ad341..a7c1d19
--- a/vendor/anbox/src/anbox/platform/null/platform.h
+++ b/vendor/anbox/src/anbox/platform/null/platform.h
@@ -35,6 +35,8 @@ class NullPlatform : public BasePlatform {
   std::shared_ptr<audio::Source> create_audio_source() override;
   void set_renderer(const std::shared_ptr<Renderer> &renderer) override;
   void set_window_manager(const std::shared_ptr<wm::Manager> &window_manager) override;
+  void unset_renderer() override;
+  void unset_window_manager() override;
   bool supports_multi_window() const override;
 };
 }  // namespace wm
diff --git a/vendor/anbox/src/anbox/platform/sdl/platform.cpp b/vendor/anbox/src/anbox/platform/sdl/platform.cpp
old mode 100644
new mode 100755
index 56f1ff4..1a9175a
--- a/vendor/anbox/src/anbox/platform/sdl/platform.cpp
+++ b/vendor/anbox/src/anbox/platform/sdl/platform.cpp
@@ -46,7 +46,7 @@ Platform::Platform(
   // by the desktop shell already and we don't have to do this again.
   // If we would leave this enabled it will prevent systems from
   // suspending correctly.
-  SDL_SetHint(SDL_HINT_VIDEO_ALLOW_SCREENSAVER, "1");
+  //SDL_SetHint(SDL_HINT_VIDEO_ALLOW_SCREENSAVER, "1");
 
 #ifdef SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR
   // Don't disable compositing
@@ -146,6 +146,12 @@ void Platform::set_window_manager(const std::shared_ptr<wm::Manager> &window_man
   window_manager_ = window_manager;
 }
 
+void Platform::unset_renderer() {
+  renderer_.reset();
+}
+void Platform::unset_window_manager() {
+  window_manager_.reset();
+}
 void Platform::process_events() {
   event_thread_running_ = true;
 
diff --git a/vendor/anbox/src/anbox/platform/sdl/platform.h b/vendor/anbox/src/anbox/platform/sdl/platform.h
old mode 100644
new mode 100755
index 898c545..2ae1fb4
--- a/vendor/anbox/src/anbox/platform/sdl/platform.h
+++ b/vendor/anbox/src/anbox/platform/sdl/platform.h
@@ -62,6 +62,8 @@ class Platform : public std::enable_shared_from_this<Platform>,
   void set_renderer(const std::shared_ptr<Renderer> &renderer) override;
   void set_window_manager(const std::shared_ptr<wm::Manager> &window_manager) override;
 
+  void unset_renderer() override;
+  void unset_window_manager() override;
   void set_clipboard_data(const ClipboardData &data) override;
   ClipboardData get_clipboard_data() override;
 
diff --git a/vendor/anbox/src/anbox/rpc/connection_creator.cpp b/vendor/anbox/src/anbox/rpc/connection_creator.cpp
old mode 100644
new mode 100755
index 2f3f864..dad380d
--- a/vendor/anbox/src/anbox/rpc/connection_creator.cpp
+++ b/vendor/anbox/src/anbox/rpc/connection_creator.cpp
@@ -34,7 +34,10 @@ ConnectionCreator::ConnectionCreator(const std::shared_ptr<Runtime>& rt,
           std::make_shared<network::Connections<network::SocketConnection>>()),
       message_processor_factory_(factory) {}
 
-ConnectionCreator::~ConnectionCreator() noexcept {}
+ConnectionCreator::~ConnectionCreator() noexcept {
+    if (connection_)
+        connections_->remove(connection_->id());
+}
 
 void ConnectionCreator::create_connection_for(
     std::shared_ptr<boost::asio::local::stream_protocol::socket> const&
@@ -51,11 +54,11 @@ void ConnectionCreator::create_connection_for(
       std::make_shared<network::LocalSocketMessenger>(socket);
   auto const processor = message_processor_factory_(messenger);
 
-  auto const& connection = std::make_shared<network::SocketConnection>(
+  connection_ = std::make_shared<network::SocketConnection>(
       messenger, messenger, next_id(), connections_, processor);
-  connection->set_name("rpc");
-  connections_->add(connection);
-  connection->read_next_message();
+  connection_->set_name("rpc");
+  connections_->add(connection_);
+  connection_->read_next_message();
 }
 
 int ConnectionCreator::next_id() { return next_connection_id_.fetch_add(1); }
diff --git a/vendor/anbox/src/anbox/rpc/connection_creator.h b/vendor/anbox/src/anbox/rpc/connection_creator.h
old mode 100644
new mode 100755
index 960e47f..c0e0930
--- a/vendor/anbox/src/anbox/rpc/connection_creator.h
+++ b/vendor/anbox/src/anbox/rpc/connection_creator.h
@@ -54,6 +54,7 @@ class ConnectionCreator
   std::shared_ptr<network::Connections<network::SocketConnection>> const
       connections_;
   MessageProcessorFactory message_processor_factory_;
+  std::shared_ptr<network::SocketConnection> connection_;
 };
 }  // namespace rpc
 }  // namespace anbox
diff --git a/vendor/anbox/src/anbox/system_configuration.cpp b/vendor/anbox/src/anbox/system_configuration.cpp
old mode 100644
new mode 100755
index 5b0b223..abf09d4
--- a/vendor/anbox/src/anbox/system_configuration.cpp
+++ b/vendor/anbox/src/anbox/system_configuration.cpp
@@ -43,6 +43,12 @@ static std::string runtime_dir() {
 }
 }
 
+void anbox::SystemConfiguration::set_container_id(const std::string &id, bool nothrow) {
+  static std::string dir = anbox::utils::string_format("%s/anbox/%s", runtime_dir(), id);
+  if (fs::is_directory(fs::path(dir)) && !nothrow)
+    BOOST_THROW_EXCEPTION(std::runtime_error("Container name provided already in use"));
+  container_id = id;
+}
 void anbox::SystemConfiguration::set_data_path(const std::string &path) {
   data_path = path;
 }
@@ -50,6 +56,9 @@ void anbox::SystemConfiguration::set_data_path(const std::string &path) {
 fs::path anbox::SystemConfiguration::data_dir() const {
   return data_path;
 }
+std::string anbox::SystemConfiguration::container_name() const {
+  return container_id;
+}
 
 std::string anbox::SystemConfiguration::rootfs_dir() const {
   return (data_path / "rootfs").string();
@@ -64,11 +73,11 @@ std::string anbox::SystemConfiguration::combined_rootfs_dir() const {
 }
 
 std::string anbox::SystemConfiguration::log_dir() const {
-  return (data_path / "logs").string();
+  return (data_path / container_id / "logs").string();
 }
 
 std::string anbox::SystemConfiguration::container_config_dir() const {
-  return (data_path / "containers").string();
+  return (data_path / container_id / "containers").string();
 }
 
 std::string anbox::SystemConfiguration::container_socket_path() const {
@@ -83,6 +92,11 @@ std::string anbox::SystemConfiguration::container_socket_path() const {
   return path;
 }
 
+std::string anbox::SystemConfiguration::instance_dir() const {
+  static std::string dir = anbox::utils::string_format("%s/anbox/%s",
+						       runtime_dir(), container_id);
+  return dir;
+}
 std::string anbox::SystemConfiguration::container_devices_dir() const {
   return (data_path / "devices").string();
 }
@@ -92,17 +106,17 @@ std::string anbox::SystemConfiguration::container_state_dir() const {
 }
 
 std::string anbox::SystemConfiguration::socket_dir() const {
-  static std::string dir = anbox::utils::string_format("%s/anbox/sockets", runtime_dir());
+  static std::string dir = anbox::utils::string_format("%s/anbox/%s/sockets", runtime_dir(), container_id);
   return dir;
 }
 
 std::string anbox::SystemConfiguration::input_device_dir() const {
-  static std::string dir = anbox::utils::string_format("%s/anbox/input", runtime_dir());
+  static std::string dir = anbox::utils::string_format("%s/anbox/%s/input", runtime_dir(), container_id);
   return dir;
 }
 
 std::string anbox::SystemConfiguration::application_item_dir() const {
-  static auto dir = xdg::data().home() / "applications" / "anbox";
+  static auto dir = xdg::data().home() / "applications" / "anbox" / container_id;
   if (anbox::utils::get_env_value("ANBOX_NO_DESKTOP_SUBDIR").length() > 0)
     dir = xdg::data().home() / "applications";
   return dir.string();
diff --git a/vendor/anbox/src/anbox/system_configuration.h b/vendor/anbox/src/anbox/system_configuration.h
old mode 100644
new mode 100755
index aaa081a..c192189
--- a/vendor/anbox/src/anbox/system_configuration.h
+++ b/vendor/anbox/src/anbox/system_configuration.h
@@ -30,13 +30,16 @@ class SystemConfiguration {
 
   virtual ~SystemConfiguration() = default;
 
+  void set_container_id(const std::string &id, bool nothrow);
   void set_data_path(const std::string &path);
 
   boost::filesystem::path data_dir() const;
+  std::string container_name() const;
   std::string rootfs_dir() const;
   std::string overlay_dir() const;
   std::string combined_rootfs_dir() const;
   std::string log_dir() const;
+  std::string instance_dir() const;
   std::string socket_dir() const;
   std::string container_config_dir() const;
   std::string container_socket_path() const;
@@ -51,6 +54,7 @@ class SystemConfiguration {
 
   boost::filesystem::path data_path;
   boost::filesystem::path resource_path;
+  std::string container_id;
 };
 }  // namespace anbox
 
diff --git a/vendor/anbox/src/anbox/utils.cpp b/vendor/anbox/src/anbox/utils.cpp
old mode 100644
new mode 100755
index 6d52570..b34d400
--- a/vendor/anbox/src/anbox/utils.cpp
+++ b/vendor/anbox/src/anbox/utils.cpp
@@ -31,6 +31,7 @@
 #include <sys/types.h>
 
 #include "anbox/utils.h"
+#include "anbox/logger.h"
 
 namespace fs = boost::filesystem;
 
@@ -164,6 +165,13 @@ void ensure_paths(const std::vector<std::string> &paths) {
   }
 }
 
+void remove_paths(const std::vector<std::string> &paths) {
+  for (const auto &path : paths) {
+    if (fs::is_directory(fs::path(path)))
+      if (fs::is_empty(fs::path(path)))
+        fs::remove(fs::path(path));
+  }
+}
 std::string prefix_dir_from_env(const std::string &path,
                                 const std::string &env_var) {
   static auto snap_data_path = anbox::utils::get_env_value(env_var, "");
diff --git a/vendor/anbox/src/anbox/utils.h b/vendor/anbox/src/anbox/utils.h
old mode 100644
new mode 100755
index 4b45a08..9712e77
--- a/vendor/anbox/src/anbox/utils.h
+++ b/vendor/anbox/src/anbox/utils.h
@@ -49,6 +49,7 @@ bool is_env_set(const std::string &name);
 
 void ensure_paths(const std::vector<std::string> &paths);
 
+void remove_paths(const std::vector<std::string> &paths);
 std::string prefix_dir_from_env(const std::string &path,
                                 const std::string &env_var);
 
