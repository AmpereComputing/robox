diff --git a/anbox-master/src/CMakeLists.txt b/anbox-master/src/CMakeLists.txt
old mode 100644
new mode 100755
index 6ce3cc7..fa13eb8
--- a/anbox-master/src/CMakeLists.txt
+++ b/anbox-master/src/CMakeLists.txt
@@ -95,6 +95,7 @@ set(SOURCES
     anbox/cmds/session_manager.h
     anbox/cmds/system_info.cpp
     anbox/cmds/system_info.h
+    anbox/cmds/generate_ip_config.cpp
     anbox/cmds/version.cpp
     anbox/cmds/version.h
     anbox/cmds/wait_ready.cpp
diff --git a/anbox-master/src/anbox/android/ip_config_builder.cpp b/anbox-master/src/anbox/android/ip_config_builder.cpp
old mode 100644
new mode 100755
index 8ba13ce..f75146f
--- a/anbox-master/src/anbox/android/ip_config_builder.cpp
+++ b/anbox-master/src/anbox/android/ip_config_builder.cpp
@@ -65,6 +65,7 @@ std::size_t IpConfigBuilder::write(common::BinaryWriter &writer) {
   writer.write_string_with_size(assignment_key);
   writer.write_string_with_size(assignment_to_string(assignment_));
 
+  if (assignment_to_string(assignment_) != "DHCP") {
   writer.write_string_with_size(link_address_key);
   writer.write_string_with_size(link_.address);
   writer.write_uint32(link_.prefix_length);
@@ -77,6 +78,7 @@ std::size_t IpConfigBuilder::write(common::BinaryWriter &writer) {
   writer.write_string_with_size(dns_key);
   for (const auto &server : dns_servers_)
     writer.write_string_with_size(server);
+  }
 
   writer.write_string_with_size(id_key);
   writer.write_uint32(id_);
diff --git a/anbox-master/src/anbox/cmds/generate_ip_config.cpp b/anbox-master/src/anbox/cmds/generate_ip_config.cpp
new file mode 100755
index 0000000..c606023
--- /dev/null
+++ b/anbox-master/src/anbox/cmds/generate_ip_config.cpp
@@ -0,0 +1,97 @@
+/*
+ * Copyright (C) 2017 Lee Jones <lee.jones@linaro.org>
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3, as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranties of
+ * MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
+ * PURPOSE.  See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "anbox/cmds/generate_ip_config.h"
+#include "anbox/logger.h"
+#include "anbox/wm/single_window_manager.h"
+#include "anbox/android/ip_config_builder.h"
+
+#include <fstream>
+
+anbox::cmds::GenerateIpConfig::GenerateIpConfig()
+    : CommandWithFlagsAndAction{cli::Name{"generate-ip-config"}, cli::Usage{"generate-ip-config"},
+				cli::Description{"Create ipconfig.txt needed for network configuation"}} {
+
+  flag(cli::make_flag(cli::Name{"ip"},
+                      cli::Description{"IP address (defaults to 192.168.250.2) for DHCP use 'dhcp'"},
+                      ip_));
+  flag(cli::make_flag(cli::Name{"cidr"},
+                      cli::Description{"Netmask using CIDR notation (defaults to C Class [24])"},
+                      cidr_));
+  flag(cli::make_flag(cli::Name{"gateway"},
+                      cli::Description{"Gateway IP address (defaults to 192.168.250.1)"},
+                      gateway_));
+  flag(cli::make_flag(cli::Name{"dns"},
+                      cli::Description{"Primary DNS server IP address (defaults to  8.8.8.8)"},
+                      dns_));
+
+  action([this](const cli::Command::Context&) {
+
+      if (ip_ == "dhcp" && !gateway_.empty()) {
+	ERROR("Overriding Android's gateway settings when DHCP specified is not supported");
+	return EXIT_FAILURE;
+      }
+
+      if (ip_ == "dhcp" && !dns_.empty()) {
+	ERROR("Overriding Android's DNS settings when DHCP specified is not supported");
+	return EXIT_FAILURE;
+      }
+
+      if (ip_.empty())
+	ip_ = "192.168.250.2";
+
+      if (!cidr_)
+       cidr_ = 24;
+
+      if (gateway_.empty())
+	gateway_ = "192.168.250.1";
+
+      if (dns_.empty())
+	dns_ = "8.8.8.8";
+
+      android::IpConfigBuilder ip_conf;
+
+      ip_conf.set_version(android::IpConfigBuilder::Version::Version2);
+
+      if (ip_ == "dhcp") {
+	ip_conf.set_assignment(android::IpConfigBuilder::Assignment::DHCP);
+      } else {
+	ip_conf.set_assignment(android::IpConfigBuilder::Assignment::Static);
+	ip_conf.set_link_address(ip_, cidr_);
+	ip_conf.set_gateway(gateway_);
+	ip_conf.set_dns_servers({dns_});
+      }
+
+      ip_conf.set_id(0);
+
+      std::vector<std::uint8_t> buffer(512);
+      common::BinaryWriter writer(buffer.begin(), buffer.end());
+      const auto size = ip_conf.write(writer);
+
+      const auto ip_conf_path = "ipconfig.txt";
+
+      std::ofstream f(ip_conf_path, std::ofstream::binary);
+      if (f.is_open()) {
+	f.write(reinterpret_cast<const char*>(buffer.data()), size);
+	f.close();
+      } else {
+	ERROR("Failed to open %s for writing", ip_conf_path);
+      }
+
+      return EXIT_SUCCESS;
+    });
+}
diff --git a/anbox-master/src/anbox/cmds/generate_ip_config.h b/anbox-master/src/anbox/cmds/generate_ip_config.h
new file mode 100755
index 0000000..20e49ef
--- /dev/null
+++ b/anbox-master/src/anbox/cmds/generate_ip_config.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2017 Lee Jones <lee.jones@linaro.org>
+ *
+ * This program is free software: you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 3, as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranties of
+ * MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
+ * PURPOSE.  See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef ANBOX_CMDS_GEN_IP_CONFIG_H_
+#define ANBOX_CMDS_GEN_IP_CONFIG_H_
+
+#include "anbox/cli.h"
+
+#include <string>
+
+namespace anbox {
+namespace cmds {
+class GenerateIpConfig : public cli::CommandWithFlagsAndAction {
+ public:
+  GenerateIpConfig();
+
+ private:
+  std::string ip_;
+  std::string gateway_;
+  std::string dns_;
+  uint32_t cidr_;
+};
+}  // namespace cmds
+}  // namespace anbox
+
+#endif
diff --git a/anbox-master/src/anbox/daemon.cpp b/anbox-master/src/anbox/daemon.cpp
old mode 100644
new mode 100755
index 69feb24..a0d1f1d
--- a/anbox-master/src/anbox/daemon.cpp
+++ b/anbox-master/src/anbox/daemon.cpp
@@ -25,6 +25,7 @@
 #include "anbox/cmds/container_manager.h"
 #include "anbox/cmds/session_manager.h"
 #include "anbox/cmds/system_info.h"
+#include "anbox/cmds/generate_ip_config.h"
 #include "anbox/cmds/launch.h"
 #include "anbox/cmds/version.h"
 #include "anbox/cmds/wait_ready.h"
@@ -42,6 +43,7 @@ Daemon::Daemon()
      .command(std::make_shared<cmds::SessionManager>())
      .command(std::make_shared<cmds::Launch>())
      .command(std::make_shared<cmds::ContainerManager>())
+     .command(std::make_shared<cmds::GenerateIpConfig>())
      .command(std::make_shared<cmds::SystemInfo>())
      .command(std::make_shared<cmds::WaitReady>())
      .command(std::make_shared<cmds::CheckFeatures>());
